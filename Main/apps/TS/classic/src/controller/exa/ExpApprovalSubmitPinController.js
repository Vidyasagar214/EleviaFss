/**
 * Created by steve.tess on 8/20/2018.
 */
Ext.define('TS.controller.exa.ExpApprovalSubmitPinController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.exasubmitpin',

    config: {
        sprite: null
    },

    sigDown: false,
    lastEventX: undefined,
    lastEventY: undefined,
    list: [],


    init: function() {

    },

    expSubmitPinClick: function () {
        var me = this,
            settings = TS.app.settings,
            pin = me.lookup('expSubmitPinField').getValue(),
            form = me.lookup('expSubmitPinForm').getForm(),
            view = me.getView(),
            button = me.lookup('expSubmitPinBtn');

        // if (!me.lastEventX || !view.lookup('expSubmitPinField').getValue()) {
        //     Ext.MessageBox.alert('Warning', 'PIN and Signature are both required');
        //     button.setDisabled(true);
        //     return;
        // }
        me.doSaveSignature();
        // if (form.isValid()) {
        //     User.AuthenticatePin(window.userGlobal.dbi, pin, window.userGlobal.email, function (response, operation, success) {
        //         if (response.data) {
        //             me.doSaveSignature();
        //         } else {
        //             Ext.GlobalEvents.fireEvent('Message:Code', 'tsSubmitPinBadField');
        //             me.lookup('expSubmitPinField').setValue('');
        //             me.getView().setLoading(false);
        //         }
        //     }, me, {
        //         autoHandle: true
        //     });
        // } else {
        //     Ext.GlobalEvents.fireEvent('Message:Code', 'expSubmitPinMissingFields');
        //     me.getView().setLoading(false);
        // }
    },

    /*mouse - touch events*/
    onMouseDown: function (e) {

        this.sigDown = true;
        var sprite = this.getSprite();
        if (sprite) {
            var xy = this.lookup('sigDrawPanel').getSurface().getEventXY(e);
            sprite.setAttributes({
                path: sprite.attr.path + ' M' + (xy[0]) + ',' + (xy[1])
            });
        }
    },

    onMouseMove: function (e) {
        if (this.sigDown) {

            var drawing = this.lookup('sigDrawPanel'),
                xy = drawing.getSurface().getEventXY(e);
            this.lastEventX = xy[0];
            if (!this.getSprite()) {
                var sprite = drawing.getSurface().add({
                    type: 'path',
                    path: 'M' + (xy[0]) + ',' + (xy[1]),
                    strokeStyle: 'black',
                    lineWidth: 2,
                    lineCap: 'round'
                }).show();
                this.setSprite(sprite);
            } else {
                var sprite = this.getSprite(),
                    path = sprite.attr.path;
                path += ' ' + (xy[0]) + ',' + (xy[1]);
                sprite.setAttributes({
                    path: path
                });
            }
            drawing.getSurface().renderFrame();
        }
    },

    onMouseUp: function (e) {
        var button = this.lookup('expSubmitPinBtn');
        button.setDisabled(false);
        this.sigDown = false;
        this.setSprite(null);
    },


    doSaveSignature: function (grid, record, flag) {
        // Get the references and image data, convert to blob
        var me = this,
            view = me.getView(),
            attType = view.attType,
            draw = me.lookup('sigDrawPanel'),
            imageData = draw.getImage('stream'),
            settings = TS.app.settings,
            //Get image data, convert to blob
            file = new Blob([imageData.data], {
                type: 'image/' + imageData.type
            }),
            //Get attachment data
            data = {
                type: 'EXP',
                location: settings.imageStorageLoc,
                associatedId: this.getView().associatedRecordId,
                attachmentType: this.getView().attType,
                fileExt: imageData.type,
                fileName: 'signature_' + Ext.data.identifier.Uuid.Global.generate(), // TODO - How should this be autogenerated?
                description: 'Expense Report Approval Signature',
                file: file
            };
        //Create attachment and submit timesheet

        me.convertFileToByteData(data.file, Ext.bind(function (byteData) {
            var attachmentRecord = Ext.create('TS.model.shared.Attachment', {
                owningModelType: data.type,
                owningModelId: data.associatedId + '||' + settings.empId,
                dateAttached: data.date || new Date(),
                attachmentType: data.attachmentType,
                location: data.location,
                extension: data.fileExt,
                filename: data.fileName,
                description: data.description,
                attachmentItem: byteData
            });

            Ext.GlobalEvents.fireEvent('ApproveRejectExpAfterPinCheck', view.config.grid, view.config.record, view.config.flag, attachmentRecord);// view.button, view.event, attachmentRecord);

            me.getView().close();

        }, me));
    },

    // Removes all sprites from the draw panel
    doClearSignature: function () {
        this.lookup('sigDrawPanel').removeAll();
        this.lastEventX = null;
        var button = this.lookup('expSubmitPinBtn');
        button.setDisabled(true);
    },
    /*
     * Helper Methods
     */
    convertFileToByteData: function (file, callback) {
        var reader = new FileReader();
        reader.onload = (function (file) {
            return function (e) {
                // Convert to plain array for sending through to Ext.Direct
                var byteArray = new Uint8Array(e.target.result),
                    returnArray = [];
                for (var i = 0; i < byteArray.length; i++) {
                    returnArray[i] = byteArray[i];
                }
                callback(returnArray);
            };
        })(file);
        reader.readAsArrayBuffer(file);
    },

    /**
     * @param {Ext.button.Button} component
     * @param {Event} e
     */
    expSubmitPinCancel: function (component, e) {

    }

});